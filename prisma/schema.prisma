// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(uuid())
  name             String?
  email            String         @unique
  password         String
  isPremium        Boolean        @default(false)
  paymentTotal     Float          @default(0.0) // Total money paid
  paymentRemaining Float          @default(0.0) // Remaining money
  tokenUsage       TokenUsage[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  conversations    Conversation[] 
}

model TokenUsage {
  id               String @id @default(uuid())
  userId           String
  model            String // e.g., "gpt", "claude", etc.
  inputTokensUsed  Int    @default(0) // Number of input tokens used
  outputTokensUsed Int    @default(0) // Number of output tokens used
  inputTokenCost   Float  @default(0.0) // Cost per million input tokens
  outputTokenCost  Float  @default(0.0) // Cost per million output tokens
  totalCost        Float  @default(0.0) // Total cost for this model
  user             User   @relation(fields: [userId], references: [id])
}

model Conversation {
  id             String    @id @default(uuid())
  userId         String
  repositoryName String // e.g., "dub.sh"
  iteration      Int // Iteration number
  iterationName  String // e.g., "What does this repository do?"
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id])
  messages       Message[]
  completeMessages CompleteMessage[]

  @@unique([userId, repositoryName, iteration]) // Unique constraint
}

model Message {
  id             String       @id @default(uuid())
  conversationId String
  role           String // "user" or "assistant"
  content        String
  sequence       Int // Order within the conversation
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@unique([conversationId, sequence])
}

model CompleteMessage {
  id             String       @id @default(uuid())
  conversationId String
  role           String // "user" or "assistant"
  content        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}
